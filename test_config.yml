networks:
  hits-internal: {}
  mastodon-internal: {}
  srv: {}
services:
  alertmanager:
    image: prom/alertmanager:v0.21.0
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:alertmanager.
      traefik.port: '9093'
    networks:
      srv: {}
    restart: always
  arachni:
    image: arachni/arachni
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:arachni.
      traefik.port: '9292'
    networks:
      srv: {}
    restart: always
  bazarr:
    environment:
      PGID: '1000'
      PUID: '1000'
      TZ: Europe/Paris
    image: linuxserver/bazarr:v0.8.3.4-ls61
    labels:
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: ''
      traefik.frontend.rule: Host:bazarr.
      traefik.port: '8080'
    links:
    - jackett
    - sonarr
    - transmission
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/bazarr/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/bazarr/movies:/movies:rw
    - /home/runner/work/make-my-server/make-my-server/bazarr/tv:/tv:rw
  bitwarden:
    environment:
      ADMIN_TOKEN: ''
      ROCKET_PORT: '8080'
    image: bitwardenrs/server:latest
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:bitwarden.
      traefik.port: '8080'
    networks:
      srv: {}
    restart: always
    user: nobody
    volumes:
    - /home/runner/work/make-my-server/make-my-server/bitwarden/data:/data:rw
  blog:
    depends_on:
      blog-builder:
        condition: service_started
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: nginx:stable-alpine
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:blog.
      traefik.port: '80'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/blog/nginx/conf:/etc/nginx/conf.d:rw
    - /home/runner/work/make-my-server/make-my-server/blog/nginx/logs:/var/log/nginx:rw
  blog-builder:
    environment:
      HUGO_BASEURL: https://blog./
      HUGO_REFRESH_TIME: '3600'
      HUGO_THEME: hugo-theme-cactus-plus
    image: jojomi/hugo:0.59
    labels:
      traefik.enable: "false"
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/blog/nginx/conf/www:/output:rw
    - /home/runner/work/make-my-server/make-my-server/blog/blog:/src:rw
  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:cadvisor.
      traefik.port: '8080'
    networks:
      srv: {}
    restart: always
    volumes:
    - /:/rootfs:ro
    - /sys:/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    - /var/run:/var/run:rw
  codimd:
    depends_on:
      codimd-db:
        condition: service_started
    environment:
      CMD_DB_URL: postgres://codimd:mypwd@codimd-db/codimd
      CMD_USECDN: "false"
    image: nabo.codimd.dev/hackmdio/hackmd:2.1.0
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:codimd.
      traefik.port: '3000'
    links:
    - codimd-db
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/codimd/data:/home/hackmd/app/public/uploads:rw
  codimd-db:
    environment:
      POSTGRES_DB: codimd
      POSTGRES_PASSWORD: mypwd
      POSTGRES_USER: codimd
    image: postgres:11.6-alpine
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/codimd/db:/var/lib/postgresql/data:rw
  elasticsearch:
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      bootstrap.memory_lock: "true"
      cluster.name: docker-cluster
      discovery.type: single-node
    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0
    restart: always
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - /home/runner/work/make-my-server/make-my-server/elk/elasticsearch/data:/usr/share/elasticsearch/data:rw
  factorio:
    image: factoriotools/factorio
    labels:
      traefik.enable: "false"
    ports:
    - protocol: udp
      published: 34197
      target: 34197
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/factorio:/factorio:rw
  gitlab:
    environment:
      GITLAB_OMNIBUS_CONFIG: 'external_url ''http://gitlab.:80''

        gitlab_rails[''gitlab_shell_ssh_port''] = 2224

        '
    hostname: gitlab.
    image: gitlab/gitlab-ce:latest
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:gitlab.
      traefik.port: '80'
    networks:
      srv: {}
    ports:
    - published: 2224
      target: 22
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/gitlab/config:/etc/gitlab:rw
    - /home/runner/work/make-my-server/make-my-server/gitlab/logs:/var/log/gitlab:rw
    - /home/runner/work/make-my-server/make-my-server/gitlab/data:/var/opt/gitlab:rw
  grafana:
    depends_on:
      prometheus:
        condition: service_started
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_BASIC_ENABLED: "false"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_METRICS_ENABLED: "true"
    image: grafana/grafana:7.2.2
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:grafana.
      traefik.port: '3000'
    networks:
      srv: {}
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/grafana/grafana:/var/lib/grafana:rw
  hits:
    depends_on:
      hits-postgresql:
        condition: service_started
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:4000
      timeout: 10s
    image: tommoulard/hits
    labels:
      traefik.docker.network: make-my-server_srv
      traefik.enable: "true"
      traefik.frontend.rule: Host:hits.
      traefik.port: '4000'
    networks:
      hits-internal: {}
      srv: {}
    restart: always
  hits-postgresql:
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - postgres
      timeout: 10s
    image: postgres
    networks:
      hits-internal:
        aliases:
        - postgresql
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/hits/postgresql:/var/lib/postgresql/data:rw
  jackett:
    environment:
      PGID: '1000'
      PUID: '1000'
      TZ: Europe/Paris
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:9117/UI/Login?ReturnUrl=%2FUI%2FDashboard
      timeout: 10s
    image: linuxserver/jackett:v0.15.5-ls61
    labels:
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: ''
      traefik.frontend.rule: Host:jackett.
      traefik.port: '9117'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/jackett/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/jackett/downloads:/downloads:rw
  jellyfin:
    image: jellyfin/jellyfin
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:jellyfin.
      traefik.port: '8096'
    networks:
      srv: {}
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/jellyfin/cache:/cache:rw
    - /home/runner/work/make-my-server/make-my-server/jellyfin/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/jellyfin/logs:/logs:rw
    - /home/runner/work/make-my-server/make-my-server/jellyfin/media:/media:rw
  jupyter:
    command: 'jupyter notebook --NotebookApp.token='''' --NotebookApp.password=''''

      '
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    image: jupyter/tensorflow-notebook:45f07a14b422
    labels:
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: ''
      traefik.frontend.rule: Host:jupyter.
      traefik.port: '8888'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/jupyter/notebooks:/home/jovyan:rw
    - /home/runner/work/make-my-server/make-my-server/jupyter/jupyter/config:/root/.jupyter:rw
  kibana:
    image: docker.elastic.co/kibana/kibana:7.1.0
    labels:
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: ''
      traefik.frontend.rule: Host:kibana.
      traefik.port: '5601'
    links:
    - elasticsearch
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:rw
  logstash:
    image: docker.elastic.co/logstash/logstash:7.1.0
    links:
    - elasticsearch
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/elk/logstash:/usr/share/logstash/pipeline:rw
    - /home/runner/work/make-my-server/make-my-server/nginx/logs:/var/log/nginx:rw
    - /home/runner/work/make-my-server/make-my-server/traefik/logs:/var/log/traefik:rw
  mastodon:
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p
      3000"
    depends_on:
      mastodon-postgres:
        condition: service_started
      mastodon-redis:
        condition: service_started
      mastodon-sidekiq:
        condition: service_started
      mastodon-streaming:
        condition: service_started
    environment:
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      DB_HOST: mastodon-postgres
      DB_NAME: postgres
      DB_PASS: mastodon-postgres-pass
      DB_PORT: '5432'
      DB_USER: postgres
      ES_ENABLED: "false"
      ES_HOST: localhost
      ES_PORT: '9200'
      LOCAL_DOMAIN: mastodon.example.com
      OTP_SECRET: ''
      REDIS_HOST: mastodon-redis
      REDIS_PORT: '6379'
      S3_ALIAS_HOST: files.example.com
      S3_BUCKET: files.example.com
      S3_ENABLED: "false"
      SECRET_KEY_BASE: ''
      SMTP_FROM_ADDRESS: notificatons@example.com
      SMTP_LOGIN: ''
      SMTP_PASSWORD: ''
      SMTP_PORT: '587'
      SMTP_SERVER: smtp.mailgun.org
      VAPID_PRIVATE_KEY: ''
      VAPID_PUBLIC_KEY: ''
    healthcheck:
      test:
      - CMD-SHELL
      - wget -q --spider --proxy=off localhost:3000/health || exit 1
    image: tootsuite/mastodon
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:mastodon.
      traefik.port: '3000'
    networks:
      mastodon-internal: {}
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/mastodon:/mastodon/public/system:rw
  mastodon-postgres:
    environment:
      POSTGRES_PASSWORD: mastodon-postgres-pass
    healthcheck:
      test:
      - CMD
      - pg_isready
      - -U
      - postgres
    image: postgres:9.6-alpine
    labels:
      traefik.enable: "false"
    networks:
      mastodon-internal: {}
    restart: always
    shm_size: 256mb
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/postgres:/var/lib/postgresql/data:rw
  mastodon-redis:
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
    image: redis:6.0-alpine
    labels:
      traefik.enable: "false"
    networks:
      mastodon-internal: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/redis:/data:rw
  mastodon-sidekiq:
    command: bundle exec sidekiq
    depends_on:
      mastodon-postgres:
        condition: service_started
      mastodon-redis:
        condition: service_started
    environment:
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      DB_HOST: mastodon-postgres
      DB_NAME: postgres
      DB_PASS: mastodon-postgres-pass
      DB_PORT: '5432'
      DB_USER: postgres
      ES_ENABLED: "false"
      ES_HOST: localhost
      ES_PORT: '9200'
      LOCAL_DOMAIN: mastodon.example.com
      OTP_SECRET: ''
      REDIS_HOST: mastodon-redis
      REDIS_PORT: '6379'
      S3_ALIAS_HOST: files.example.com
      S3_BUCKET: files.example.com
      S3_ENABLED: "false"
      SECRET_KEY_BASE: ''
      SMTP_FROM_ADDRESS: notificatons@example.com
      SMTP_LOGIN: ''
      SMTP_PASSWORD: ''
      SMTP_PORT: '587'
      SMTP_SERVER: smtp.mailgun.org
      VAPID_PRIVATE_KEY: ''
      VAPID_PUBLIC_KEY: ''
    image: tootsuite/mastodon
    networks:
      mastodon-internal: {}
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/mastodon:/mastodon/public/system:rw
  mastodon-streaming:
    command: node ./streaming
    depends_on:
      mastodon-postgres:
        condition: service_started
      mastodon-redis:
        condition: service_started
    environment:
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      DB_HOST: mastodon-postgres
      DB_NAME: postgres
      DB_PASS: mastodon-postgres-pass
      DB_PORT: '5432'
      DB_USER: postgres
      ES_ENABLED: "false"
      ES_HOST: localhost
      ES_PORT: '9200'
      LOCAL_DOMAIN: mastodon.example.com
      OTP_SECRET: ''
      REDIS_HOST: mastodon-redis
      REDIS_PORT: '6379'
      S3_ALIAS_HOST: files.example.com
      S3_BUCKET: files.example.com
      S3_ENABLED: "false"
      SECRET_KEY_BASE: ''
      SMTP_FROM_ADDRESS: notificatons@example.com
      SMTP_LOGIN: ''
      SMTP_PASSWORD: ''
      SMTP_PORT: '587'
      SMTP_SERVER: smtp.mailgun.org
      VAPID_PRIVATE_KEY: ''
      VAPID_PUBLIC_KEY: ''
    healthcheck:
      test:
      - CMD-SHELL
      - wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit
        1
    image: tootsuite/mastodon
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:api.mastodon.
      traefik.port: '4000'
    networks:
      mastodon-internal: {}
      srv: {}
    restart: always
  morty:
    command: -listen 0.0.0.0:3000 -timeout 6 -ipv6
    environment:
      MORTY_KEY: ''
    image: dalf/morty:latest
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:morty.
      traefik.port: '3000'
    networks:
      srv: {}
    restart: always
  musicbot:
    image: raiponce/musicbot:0.2.10
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/musicbot/conf:/musicBot/conf:rw
    - /home/runner/work/make-my-server/make-my-server/musicbot/playlists:/musicBot/playlists:rw
  nextcloud:
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: nextcloud
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:cloud.
      traefik.port: '80'
    links:
    - nextcloud-db
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/nextcloud/data:/var/www/html:rw
  nextcloud-db:
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    environment:
      MYSQL_DATABASE: nextcloud
      MYSQL_PASSWORD: ''
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_USER: nextcloud
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - mysqlcheck
      - --all-databases
      - -ppass
      timeout: 10s
    image: mariadb
    labels:
      traefik.enable: "false"
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/nextcloud/db:/var/lib/mysql:rw
  nginx:
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: nginx:stable-alpine
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: 'Host:'
      traefik.port: '80'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/nginx/conf:/etc/nginx/conf.d:rw
    - /home/runner/work/make-my-server/make-my-server/nginx/logs:/var/log/nginx:rw
  node_exporter:
    image: prom/node-exporter:v1.0.1
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:node_exporter.
      traefik.port: '9100'
    networks:
      srv: {}
    restart: always
  pastebin:
    image: mkodockx/docker-pastebin:latest
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:paste.
      traefik.port: '80'
    networks:
      srv: {}
    restart: always
  peertube:
    depends_on:
      peertube-db:
        condition: service_started
      peertube-redis:
        condition: service_started
    environment:
      PEERTUBE_ADMIN_EMAIL: admin@
      PEERTUBE_DB_HOSTNAME: peertube-db
      PEERTUBE_DB_PASSWORD: ''
      PEERTUBE_DB_USERNAME: peertube
      PEERTUBE_TRUST_PROXY: '["127.0.0.1", "loopback", "172.18.0.0/16"]'
      PEERTUBE_WEBSERVER_HOSTNAME: peertube.
      PEERTUBE_WEBSERVER_HTTPS: "true"
      PEERTUBE_WEBSERVER_PORT: '443'
    image: chocobozzz/peertube:production-buster
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:peertube.
      traefik.port: '9000'
    links:
    - peertube-db
    - peertube-redis
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/peertube/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/peertube/data:/data:rw
  peertube-db:
    environment:
      POSTGRES_DB: peertube
      POSTGRES_PASSWORD: ''
      POSTGRES_USER: peertube
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - peertube
      timeout: 10s
    image: postgres:10-alpine
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/peertube/db:/var/lib/postgresql/data:rw
  peertube-redis:
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - redis-cli
      - PING
      timeout: 10s
    image: redis:4-alpine
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/peertube/redis:/data:rw
  portainer:
    image: portainer/portainer
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:portainer.
      traefik.port: '9000'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/portainer/data:/data:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --storage.tsdb.retention.time=30d
    - --web.console.libraries=/usr/share/prometheus/console_libraries
    - --web.console.templates=/usr/share/prometheus/consoles
    depends_on:
      alertmanager:
        condition: service_started
      cadvisor:
        condition: service_started
      node_exporter:
        condition: service_started
    image: prom/prometheus:v2.22.0
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:prometheus.
      traefik.port: '9090'
    networks:
      srv: {}
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/grafana/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:rw
    - /home/runner/work/make-my-server/make-my-server/grafana/prometheus/rules:/etc/prometheus/rules:rw
    - /home/runner/work/make-my-server/make-my-server/grafana/prometheus/datas:/prometheus:rw
  runner:
    image: gitlab/gitlab-runner:latest
    labels:
      traefik.enable: "false"
    links:
    - gitlab
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/gitlab/runner:/etc/gitlab-runner:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  searx:
    command: -f
    depends_on:
      morty:
        condition: service_started
      searx-checker:
        condition: service_started
    environment:
      BASE_URL: https://searx./
      BIND_ADDRESS: 0.0.0.0:8080
      MORTY_KEY: ''
      MORTY_URL: https://morty./
    image: searx/searx:latest
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:searx.
      traefik.port: '8080'
    links:
    - morty
    - searx-checker
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/searx/searx:/etc/searx:rw
  searx-checker:
    command: -cron -o html/data/status.json http://searx:8080
    image: searx/searx-checker:latest
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/searx/searx-checker:/usr/local/searx-checker/html/data:rw
  sharelatex:
    depends_on:
      sharelatex-mongo:
        condition: service_started
      sharelatex-redis:
        condition: service_started
    environment:
      SHARELATEX_ADMIN_EMAIL: ''
      SHARELATEX_APP_NAME: '''s ShareLaTeX'
      SHARELATEX_HEADER_IMAGE_URL: http://somewhere.com/mylogo.png
      SHARELATEX_MONGO_URL: mongodb://sharelatex-mongo/sharelatex
      SHARELATEX_NAV_TITLE: ' - ShareLaTeX'
      SHARELATEX_REDIS_HOST: sharelatex-redis
      SHARELATEX_SITE_URL: https://latex.
    image: sharelatex/sharelatex
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:latex.
      traefik.port: '80'
    links:
    - sharelatex-mongo
    - sharelatex-redis
    networks:
      srv: {}
    privileged: true
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sharelatex/data:/var/lib/sharelatex:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  sharelatex-mongo:
    expose:
    - '27017'
    image: mongo
    labels:
      traefik.enable: "false"
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sharelatex/mongo:/data/db:rw
  sharelatex-redis:
    expose:
    - '6379'
    image: redis
    labels:
      traefik.enable: "false"
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sharelatex/redis/data:/data:rw
  sonarr:
    environment:
      PGID: '1000'
      PUID: '1000'
      TZ: Europe/Paris
    image: linuxserver/sonarr:2.0.0.5337-ls92
    labels:
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: ''
      traefik.frontend.rule: Host:sonarr.
      traefik.port: '8080'
    links:
    - jackett
    - transmission
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sonarr/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/sonarr/downloads:/downloads:rw
    - /home/runner/work/make-my-server/make-my-server/sonarr/tv:/tv:rw
  streama:
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:8080/login/auth
      timeout: 10s
    image: gkiko/streama:v1.8.3
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:streama.
      traefik.port: '8080'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/streama/streama.mv.db:/app/streama/streama.mv.db:rw
    - /home/runner/work/make-my-server/make-my-server/streama/streama.trace.db:/app/streama/streama.trace.db:rw
    - /home/runner/work/make-my-server/make-my-server/transmission/downloads:/data:rw
  theia:
    image: theiaide/theia
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:theia.
      traefik.port: '3000'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner:/home/project:cached
  tor-relay:
    command: -f /etc/tor/torrc.middle
    image: jess/tor-relay
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    ports:
    - published: 9001
      target: 9001
    restart: always
    volumes:
    - /etc/localtime:/etc/localtime:rw
  traefik:
    command: '--api --api.statistics

      '
    image: traefik:1.7.12
    labels:
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: ''
      traefik.frontend.rule: Host:traefik.
      traefik.port: '8080'
    networks:
      srv: {}
    ports:
    - published: 80
      target: 80
    - published: 443
      target: 443
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/traefik/logs:/logs:rw
    - /home/runner/work/make-my-server/make-my-server/traefik/traefik.toml:/traefik.toml:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  transmission:
    environment:
      PGID: '1000'
      PUID: '1000'
      TZ: Europe/Paris
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:9091/transmission/web/
      timeout: 10s
    image: linuxserver/transmission:2.94-r1-ls12
    labels:
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: ''
      traefik.frontend.rule: Host:transmission.
      traefik.port: '9091'
    networks:
      srv: {}
    ports:
    - published: 51413
      target: 51413
    - protocol: udp
      published: 51413
      target: 51413
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/transmission/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/transmission/downloads:/downloads:rw
    - /home/runner/work/make-my-server/make-my-server/transmission/watch:/watch:rw
  vpn:
    environment:
      VPN_ADDL_PASSWORDS: ''
      VPN_ADDL_USERS: ''
      VPN_IPSEC_PSK: ''
      VPN_PASSWORD: ''
      VPN_USER: ''
    image: hwdsl2/ipsec-vpn-server:latest
    ports:
    - published: 500
      target: 500
    - protocol: udp
      published: 4500
      target: 4500
    privileged: true
    restart: always
    volumes:
    - /lib/modules:/lib/modules:ro
  wordpress:
    depends_on:
      wordpress-db:
        condition: service_started
    environment:
      WORDPRESS_DB_HOST: wordpress-db
      WORDPRESS_DB_NAME: wordpress-db
      WORDPRESS_DB_PASSWORD: ''
      WORDPRESS_DB_USER: wordpress-user
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: wordpress
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: Host:wordpress.
      traefik.port: '80'
    links:
    - wordpress-db
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/wordpress/wordpress:/var/www/html:rw
  wordpress-db:
    environment:
      MYSQL_DATABASE: wordpress-db
      MYSQL_PASSWORD: ''
      MYSQL_RANDOM_ROOT_PASSWORD: ''
      MYSQL_USER: wordpress-user
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - mysqladmin
      - ping
      - -uwordpress-user
      - -p''
      - '|'
      - grep
      - alive
      timeout: 10s
    image: mysql:5.7
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/wordpress/db:/var/lib/mysql:rw
version: '2'


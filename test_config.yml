networks:
  codi-internal: {}
  hits-internal: {}
  mastodon-internal: {}
  nextcloud-internal: {}
  rocketchat-internal: {}
  srv: {}
services:
  alertmanager:
    image: prom/alertmanager:v0.21.0
    labels:
      traefik.enable: "true"
      traefik.http.routers.alertmanager.middlewares: basic_auth@docker
      traefik.http.routers.alertmanager.rule: Host(`alertmanager.localhost`)
      traefik.http.services.alertmanager.loadbalancer.server.port: '9093'
    networks:
      srv: {}
    restart: always
  arachni:
    image: arachni/arachni
    labels:
      traefik.enable: "true"
      traefik.http.routers.arachni.middlewares: basic_auth@docker
      traefik.http.routers.arachni.rule: Host(`arachni.localhost`)
      traefik.http.services.arachni.loadbalancer.server.port: '9292'
    networks:
      srv: {}
    restart: always
  bazarr:
    environment:
      PGID: '1000'
      PUID: '1000'
      TZ: Europe/Paris
    image: linuxserver/bazarr:v0.8.3.4-ls61
    labels:
      traefik.enable: "true"
      traefik.http.routers.bazarr.middlewares: basic_auth@docker
      traefik.http.routers.bazarr.rule: Host(`bazarr.localhost`)
      traefik.http.services.bazarr.loadbalancer.server.port: '8080'
    links:
    - jackett
    - sonarr
    - transmission
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/bazarr/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/bazarr/movies:/movies:rw
    - /home/runner/work/make-my-server/make-my-server/bazarr/tv:/tv:rw
  bitwarden:
    environment:
      ADMIN_TOKEN: ''
      ROCKET_PORT: '8080'
    image: vaultwarden/server:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.bitwarden.rule: Host(`bitwarden.localhost`)
      traefik.http.services.bitwarden.loadbalancer.server.port: '8080'
    networks:
      srv: {}
    restart: always
    user: nobody
    volumes:
    - /home/runner/work/make-my-server/make-my-server/bitwarden/data:/data:rw
  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    labels:
      traefik.enable: "true"
      traefik.http.routers.cadvisor.middlewares: basic_auth@docker
      traefik.http.routers.cadvisor.rule: Host(`cadvisor.localhost`)
      traefik.http.services.cadvisor.loadbalancer.server.port: '8080'
    networks:
      srv: {}
    restart: always
    volumes:
    - /:/rootfs:ro
    - /sys:/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    - /var/run:/var/run:rw
  codimd:
    depends_on:
      codimd-db:
        condition: service_started
    environment:
      CMD_DB_URL: postgres://codimd:mypwd@codimd-db/codimd
      CMD_USECDN: "false"
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - wget
      - 0.0.0.0:3000
      - '|'
      - grep
      - '200'
      timeout: 10s
    image: nabo.codimd.dev/hackmdio/hackmd:2.2.0
    labels:
      traefik.enable: "true"
      traefik.http.routers.codimd.rule: Host(`codimd.localhost`)
      traefik.http.services.codimd.loadbalancer.server.port: '3000'
    links:
    - codimd-db
    networks:
      codi-internal: {}
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/codimd/data:/home/hackmd/app/public/uploads:rw
  codimd-db:
    environment:
      POSTGRES_DB: codimd
      POSTGRES_PASSWORD: mypwd
      POSTGRES_USER: codimd
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - codimd
      timeout: 10s
    image: postgres:11.6-alpine
    labels:
      traefik.enable: "false"
    networks:
      codi-internal: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/codimd/db:/var/lib/postgresql/data:rw
  elasticsearch:
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      bootstrap.memory_lock: "true"
      cluster.name: docker-cluster
      discovery.type: single-node
    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0
    labels:
      traefik.enable: "false"
    restart: always
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - /home/runner/work/make-my-server/make-my-server/elk/elasticsearch/data:/usr/share/elasticsearch/data:rw
  factorio:
    image: factoriotools/factorio
    labels:
      traefik.enable: "false"
    ports:
    - protocol: udp
      published: 34197
      target: 34197
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/factorio:/factorio:rw
  gitlab:
    environment:
      GITLAB_OMNIBUS_CONFIG: 'external_url ''http://gitlab.localhost:80''

        gitlab_rails[''gitlab_shell_ssh_port''] = 2224

        '
    hostname: gitlab.localhost
    image: gitlab/gitlab-ce:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.gitlab.rule: Host(`gitlab.localhost`)
      traefik.http.services.gitlab.loadbalancer.server.port: '80'
    networks:
      srv: {}
    ports:
    - published: 2224
      target: 22
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/gitlab/config:/etc/gitlab:rw
    - /home/runner/work/make-my-server/make-my-server/gitlab/logs:/var/log/gitlab:rw
    - /home/runner/work/make-my-server/make-my-server/gitlab/data:/var/opt/gitlab:rw
  grafana:
    depends_on:
      prometheus:
        condition: service_started
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_BASIC_ENABLED: "false"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_METRICS_ENABLED: "true"
    image: grafana/grafana:7.2.2
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.middlewares: basic_auth@docker
      traefik.http.routers.grafana.rule: Host(`grafana.localhost`)
      traefik.http.services.grafana.loadbalancer.server.port: '3000'
    networks:
      srv: {}
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/grafana/grafana:/var/lib/grafana:rw
  hits:
    depends_on:
      hits-postgresql:
        condition: service_started
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:4000
      timeout: 10s
    image: tommoulard/hits
    labels:
      traefik.enable: "true"
      traefik.http.routers.hits.rule: Host(`hits.localhost`)
      traefik.http.services.hits.loadbalancer.server.port: '4000'
    networks:
      hits-internal: {}
      srv: {}
    restart: always
  hits-postgresql:
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - postgres
      timeout: 10s
    image: postgres
    networks:
      hits-internal:
        aliases:
        - postgresql
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/hits/postgresql:/var/lib/postgresql/data:rw
  hugo:
    depends_on:
      hugo-builder:
        condition: service_started
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: nginx:stable-alpine
    labels:
      traefik.enable: "true"
      traefik.http.routers.hugo.rule: Host(`hugo.localhost`)
      traefik.http.services.hugo.loadbalancer.server.port: '80'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/hugo/nginx/conf:/etc/nginx/conf.d:rw
    - /home/runner/work/make-my-server/make-my-server/hugo/nginx/logs:/var/log/nginx:rw
  hugo-builder:
    environment:
      HUGO_BASEURL: https://hugo.localhost/
      HUGO_REFRESH_TIME: '3600'
      HUGO_THEME: hugo-theme-cactus-plus
    image: jojomi/hugo:0.59
    labels:
      traefik.enable: "false"
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/hugo/nginx/conf/www:/output:rw
    - /home/runner/work/make-my-server/make-my-server/hugo/blog:/src:rw
  jackett:
    environment:
      PGID: '1000'
      PUID: '1000'
      TZ: Europe/Paris
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:9117/UI/Login?ReturnUrl=%2FUI%2FDashboard
      timeout: 10s
    image: linuxserver/jackett:v0.20.567-ls56
    labels:
      traefik.enable: "true"
      traefik.http.routers.jackett.middlewares: basic_auth@docker
      traefik.http.routers.jackett.rule: Host(`jackett.localhost`)
      traefik.http.services.jackett.loadbalancer.server.port: '9117'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/jackett/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/jackett/downloads:/downloads:rw
  jellyfin:
    image: jellyfin/jellyfin
    labels:
      traefik.enable: "true"
      traefik.http.routers.jellyfin.rule: Host(`jellyfin.localhost`)
      traefik.http.services.jellyfin.loadbalancer.server.port: '8096'
    networks:
      srv: {}
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/jellyfin/cache:/cache:rw
    - /home/runner/work/make-my-server/make-my-server/jellyfin/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/jellyfin/logs:/logs:rw
    - /home/runner/work/make-my-server/make-my-server/jellyfin/media:/media:rw
  jupyter:
    command: 'jupyter notebook --NotebookApp.token='''' --NotebookApp.password=''''

      '
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    image: jupyter/tensorflow-notebook:45f07a14b422
    labels:
      traefik.enable: "true"
      traefik.http.routers.jupyter.middlewares: basic_auth@docker
      traefik.http.routers.jupyter.rule: Host(`jupyter.localhost`)
      traefik.http.services.jupyter.loadbalancer.server.port: '8888'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/jupyter/notebooks:/home/jovyan:rw
    - /home/runner/work/make-my-server/make-my-server/jupyter/jupyter/config:/root/.jupyter:rw
  kibana:
    image: docker.elastic.co/kibana/kibana:7.1.0
    labels:
      traefik.enable: "true"
      traefik.http.routers.kibana.middlewares: basic_auth@docker
      traefik.http.routers.kibana.rule: Host(`kibana.localhost`)
      traefik.http.services.kibana.loadbalancer.server.port: '5601'
    links:
    - elasticsearch
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:rw
  logstash:
    image: docker.elastic.co/logstash/logstash:7.1.0
    labels:
      traefik.enable: "false"
    links:
    - elasticsearch
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/elk/logstash:/usr/share/logstash/pipeline:rw
    - /home/runner/work/make-my-server/make-my-server/nginx/logs:/var/log/nginx:rw
    - /home/runner/work/make-my-server/make-my-server/traefik/logs:/var/log/traefik:rw
  mastodon:
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p
      3000"
    depends_on:
      mastodon-postgres:
        condition: service_started
      mastodon-redis:
        condition: service_started
      mastodon-sidekiq:
        condition: service_started
      mastodon-streaming:
        condition: service_started
    environment:
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      DB_HOST: mastodon-postgres
      DB_NAME: postgres
      DB_PASS: mastodon-postgres-pass
      DB_PORT: '5432'
      DB_USER: postgres
      ES_ENABLED: "false"
      ES_HOST: localhost
      ES_PORT: '9200'
      LOCAL_DOMAIN: mastodon.example.com
      OTP_SECRET: ''
      REDIS_HOST: mastodon-redis
      REDIS_PORT: '6379'
      S3_ALIAS_HOST: files.example.com
      S3_BUCKET: files.example.com
      S3_ENABLED: "false"
      SECRET_KEY_BASE: ''
      SMTP_FROM_ADDRESS: notificatons@example.com
      SMTP_LOGIN: ''
      SMTP_PASSWORD: ''
      SMTP_PORT: '587'
      SMTP_SERVER: smtp.mailgun.org
      STREAMING_API_BASE_URL: wss://mastodon-streaming.example.com
      VAPID_PRIVATE_KEY: ''
      VAPID_PUBLIC_KEY: ''
    healthcheck:
      test:
      - CMD-SHELL
      - wget -q --spider --proxy=off localhost:3000/health || exit 1
    image: tootsuite/mastodon
    labels:
      traefik.enable: "true"
      traefik.http.routers.mastodon.rule: Host(`mastodon.localhost`)
      traefik.http.services.mastodon.loadbalancer.server.port: '3000'
    networks:
      mastodon-internal: {}
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/mastodon:/mastodon/public/system:rw
  mastodon-postgres:
    environment:
      POSTGRES_PASSWORD: mastodon-postgres-pass
    healthcheck:
      test:
      - CMD
      - pg_isready
      - -U
      - postgres
    image: postgres:9.6-alpine
    labels:
      traefik.enable: "false"
    networks:
      mastodon-internal: {}
    restart: always
    shm_size: 256mb
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/postgres:/var/lib/postgresql/data:rw
  mastodon-redis:
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
    image: redis:6.0-alpine
    labels:
      traefik.enable: "false"
    networks:
      mastodon-internal: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/redis:/data:rw
  mastodon-sidekiq:
    command: bundle exec sidekiq
    depends_on:
      mastodon-postgres:
        condition: service_started
      mastodon-redis:
        condition: service_started
    environment:
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      DB_HOST: mastodon-postgres
      DB_NAME: postgres
      DB_PASS: mastodon-postgres-pass
      DB_PORT: '5432'
      DB_USER: postgres
      ES_ENABLED: "false"
      ES_HOST: localhost
      ES_PORT: '9200'
      LOCAL_DOMAIN: mastodon.example.com
      OTP_SECRET: ''
      REDIS_HOST: mastodon-redis
      REDIS_PORT: '6379'
      S3_ALIAS_HOST: files.example.com
      S3_BUCKET: files.example.com
      S3_ENABLED: "false"
      SECRET_KEY_BASE: ''
      SMTP_FROM_ADDRESS: notificatons@example.com
      SMTP_LOGIN: ''
      SMTP_PASSWORD: ''
      SMTP_PORT: '587'
      SMTP_SERVER: smtp.mailgun.org
      STREAMING_API_BASE_URL: wss://mastodon-streaming.example.com
      VAPID_PRIVATE_KEY: ''
      VAPID_PUBLIC_KEY: ''
    image: tootsuite/mastodon
    networks:
      mastodon-internal: {}
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/mastodon/mastodon:/mastodon/public/system:rw
  mastodon-streaming:
    command: node ./streaming
    depends_on:
      mastodon-postgres:
        condition: service_started
      mastodon-redis:
        condition: service_started
    environment:
      AWS_ACCESS_KEY_ID: ''
      AWS_SECRET_ACCESS_KEY: ''
      DB_HOST: mastodon-postgres
      DB_NAME: postgres
      DB_PASS: mastodon-postgres-pass
      DB_PORT: '5432'
      DB_USER: postgres
      ES_ENABLED: "false"
      ES_HOST: localhost
      ES_PORT: '9200'
      LOCAL_DOMAIN: mastodon.example.com
      OTP_SECRET: ''
      REDIS_HOST: mastodon-redis
      REDIS_PORT: '6379'
      S3_ALIAS_HOST: files.example.com
      S3_BUCKET: files.example.com
      S3_ENABLED: "false"
      SECRET_KEY_BASE: ''
      SMTP_FROM_ADDRESS: notificatons@example.com
      SMTP_LOGIN: ''
      SMTP_PASSWORD: ''
      SMTP_PORT: '587'
      SMTP_SERVER: smtp.mailgun.org
      STREAMING_API_BASE_URL: wss://mastodon-streaming.example.com
      VAPID_PRIVATE_KEY: ''
      VAPID_PUBLIC_KEY: ''
    healthcheck:
      test:
      - CMD-SHELL
      - wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit
        1
    image: tootsuite/mastodon
    labels:
      traefik.enable: "true"
      traefik.http.routers.mastodon-streaming.rule: Host(`mastodon-streaming.localhost`)
      traefik.http.services.mastodon-streaming.loadbalancer.server.port: '4000'
    networks:
      mastodon-internal: {}
      srv: {}
    restart: always
  minecraft:
    environment:
      EULA: "TRUE"
    image: itzg/minecraft-server
    labels:
      traefik.enable: "false"
    ports:
    - protocol: udp
      published: 25565
      target: 25565
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/minecraft/minecraft-data:/data:rw
  minecraft-ftb:
    image: jonasbonno/ftb-revelation
    labels:
      traefik.enable: "false"
    ports:
    - protocol: udp
      published: 25565
      target: 25565
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/minecraft/ftb-data:/minecraft:rw
  morty:
    command: -listen 0.0.0.0:3000 -timeout 6 -ipv6
    environment:
      MORTY_KEY: VGhpcyBrZXkgaXMgTk9UIHNlY3VyZQ==
    image: dalf/morty:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.morty.middlewares: basic_auth@docker
      traefik.http.routers.morty.rule: Host(`morty.localhost`)
      traefik.http.services.morty.loadbalancer.server.port: '3000'
    networks:
      srv: {}
    restart: always
  musicbot:
    image: raiponce/musicbot:0.2.10
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/musicbot/conf:/musicBot/conf:rw
    - /home/runner/work/make-my-server/make-my-server/musicbot/playlists:/musicBot/playlists:rw
  nextcloud:
    depends_on:
      nextcloud-db:
        condition: service_started
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: nextcloud:latest
    labels:
      traefik.enable: "True"
      traefik.http.middlewares.header-nextcloud.headers.browserXssFilter: "True"
      traefik.http.middlewares.header-nextcloud.headers.contentTypeNosniff: "True"
      traefik.http.middlewares.header-nextcloud.headers.customFrameOptionsValue: SAMEORIGIN
      traefik.http.middlewares.header-nextcloud.headers.referrerPolicy: no-referrer
      traefik.http.middlewares.header-nextcloud.headers.stsincludesubdomains: "True"
      traefik.http.middlewares.header-nextcloud.headers.stspreload: "True"
      traefik.http.middlewares.header-nextcloud.headers.stsseconds: '15552000'
      traefik.http.middlewares.redirect-dav-nextcloud.redirectRegex.permanent: "True"
      traefik.http.middlewares.redirect-dav-nextcloud.redirectRegex.regex: https://nextcloud.localhost/.well-known/(card|cal)dav
      traefik.http.middlewares.redirect-dav-nextcloud.redirectRegex.replacement: https://nextcloud.localhost/remote.php/dav/
      traefik.http.routers.nextcloud.middlewares: header-nextcloud,redirect-dav-nextcloud
      traefik.http.routers.nextcloud.rule: Host(`nextcloud.localhost`)
      traefik.http.services.nextcloud.loadbalancer.server.port: '80'
    networks:
      nextcloud-internal: {}
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/nextcloud/data:/var/www/html:rw
  nextcloud-db:
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    environment:
      MYSQL_DATABASE: nextcloud
      MYSQL_PASSWORD: nextcloud
      MYSQL_ROOT_PASSWORD: pass
      MYSQL_USER: nextcloud
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - mysqlcheck
      - --all-databases
      - -ppass
      timeout: 10s
    image: mariadb
    labels:
      traefik.enable: "False"
    networks:
      nextcloud-internal: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/nextcloud/db:/var/lib/mysql:rw
  nginx:
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: nginx:stable-alpine
    labels:
      traefik.enable: "true"
      traefik.http.routers.nginx.rule: Host(`localhost`)
      traefik.http.services.nginx.loadbalancer.server.port: '80'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/nginx/conf:/etc/nginx/conf.d:rw
    - /home/runner/work/make-my-server/make-my-server/nginx/logs:/var/log/nginx:rw
  node_exporter:
    image: prom/node-exporter:v1.0.1
    labels:
      traefik.enable: "true"
      traefik.http.routers.node_exporter.middlewares: basic_auth@docker
      traefik.http.routers.node_exporter.rule: Host(`node_exporter.localhost`)
      traefik.http.services.node_exporter.loadbalancer.server.port: '9100'
    networks:
      srv: {}
    restart: always
  pastebin:
    image: mkodockx/docker-pastebin:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.pastebin.rule: Host(`pastebin.localhost`)
      traefik.http.services.pastebin.loadbalancer.server.port: '80'
    networks:
      srv: {}
    restart: always
  peertube:
    depends_on:
      peertube-db:
        condition: service_started
      peertube-redis:
        condition: service_started
    environment:
      PEERTUBE_ADMIN_EMAIL: changeme@changeme.org
      PEERTUBE_DB_HOSTNAME: peertube-db
      PEERTUBE_DB_PASSWORD: ''
      PEERTUBE_DB_USERNAME: peertube
      PEERTUBE_TRUST_PROXY: '["127.0.0.1", "loopback", "172.0.0.0/0"]'
      PEERTUBE_WEBSERVER_HOSTNAME: peertube.localhost
      PEERTUBE_WEBSERVER_HTTPS: "true"
      PEERTUBE_WEBSERVER_PORT: '443'
    image: chocobozzz/peertube:production-buster
    labels:
      traefik.enable: "true"
      traefik.http.routers.peertube.rule: Host(`peertube.localhost`)
      traefik.http.services.peertube.loadbalancer.server.port: '9000'
    links:
    - peertube-db
    - peertube-redis
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/peertube/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/peertube/data:/data:rw
  peertube-db:
    environment:
      POSTGRES_DB: peertube
      POSTGRES_PASSWORD: ''
      POSTGRES_USER: peertube
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - pg_isready
      - -U
      - peertube
      timeout: 10s
    image: postgres:10-alpine
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/peertube/db:/var/lib/postgresql/data:rw
  peertube-redis:
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - redis-cli
      - PING
      timeout: 10s
    image: redis:4-alpine
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/peertube/redis:/data:rw
  portainer:
    image: portainer/portainer
    labels:
      traefik.enable: "true"
      traefik.http.routers.portainer.middlewares: basic_auth@docker
      traefik.http.routers.portainer.rule: Host(`portainer.localhost`)
      traefik.http.services.portainer.loadbalancer.server.port: '9000'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/portainer/data:/data:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --storage.tsdb.retention.time=30d
    - --web.console.libraries=/usr/share/prometheus/console_libraries
    - --web.console.templates=/usr/share/prometheus/consoles
    depends_on:
      alertmanager:
        condition: service_started
      cadvisor:
        condition: service_started
      node_exporter:
        condition: service_started
    image: prom/prometheus:v2.22.0
    labels:
      traefik.enable: "true"
      traefik.http.routers.prometheus.middlewares: basic_auth@docker
      traefik.http.routers.prometheus.rule: Host(`prometheus.localhost`)
      traefik.http.services.prometheus.loadbalancer.server.port: '9090'
    networks:
      srv: {}
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner/work/make-my-server/make-my-server/grafana/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:rw
    - /home/runner/work/make-my-server/make-my-server/grafana/prometheus/rules:/etc/prometheus/rules:rw
    - /home/runner/work/make-my-server/make-my-server/grafana/prometheus/data:/prometheus:rw
  remotely:
    build:
      context: https://github.com/immense/remotely.git#:Server
    image: translucency/remotely:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.remotely.rule: Host(`remotely.localhost`)
      traefik.http.services.remotely.loadbalancer.server.port: '5000'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/remotely/remotely-data:/remotely-data:rw
  rocketchat:
    depends_on:
      rocketchat-mongo:
        condition: service_started
      rocketchat-mongo-replica:
        condition: service_started
    environment:
      MONGO_OPLOG_URL: mongodb://rocketchat-mongo:27017/local
      MONGO_URL: mongodb://rocketchat-mongo:27017/rocketchat
      ROOT_URL: https://rocketchat.localhost
    image: rocket.chat:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.rocketchat.rule: Host(`rocketchat.localhost`)
      traefik.http.services.rocketchat.loadbalancer.server.port: '3000'
    networks:
      rocketchat-internal: {}
      srv: {}
    restart: unless-stopped
    volumes:
    - /home/runner/work/make-my-server/make-my-server/rocketchat/uploads:/app/uploads:rw
  rocketchat-hubot:
    depends_on:
      rocketchat:
        condition: service_started
    environment:
      BOT_NAME: bot
      ROCKETCHAT_PASSWORD: botpassword
      ROCKETCHAT_ROOM: GENERAL
      ROCKETCHAT_URL: rocketchat:3000
      ROCKETCHAT_USER: bot
    image: rocketchat/hubot-rocketchat:latest
    labels:
      traefik.enable: "false"
    restart: unless-stopped
    volumes:
    - /home/runner/work/make-my-server/make-my-server/rocketchat/scripts:/home/hubot/scripts:rw
  rocketchat-mongo:
    command: mongod --smallfiles --oplogSize 128 --replSet rs01
    image: mongo:4.0
    labels:
      traefik.enable: "false"
    networks:
      rocketchat-internal: {}
    volumes:
    - /home/runner/work/make-my-server/make-my-server/rocketchat/db:/data/db:rw
  rocketchat-mongo-replica:
    command: 'mongo rocketchat-mongo/rocketchat --eval "rs.initiate({ _id: ''rs01'',
      members: [ { _id: 0, host: ''localhost:27017'' } ]})"'
    depends_on:
      rocketchat-mongo:
        condition: service_started
    image: mongo:4.0
    labels:
      traefik.enable: "false"
    networks:
      rocketchat-internal: {}
  runner:
    image: gitlab/gitlab-runner:latest
    labels:
      traefik.enable: "false"
    links:
    - gitlab
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/gitlab/runner:/etc/gitlab-runner:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  searx:
    command: -f
    depends_on:
      morty:
        condition: service_started
    environment:
      BASE_URL: https://searx.localhost/
      BIND_ADDRESS: 0.0.0.0:8080
      MORTY_KEY: VGhpcyBrZXkgaXMgTk9UIHNlY3VyZQ==
      MORTY_URL: http://morty/
    healthcheck:
      test:
      - CMD-SHELL
      - wget -q --spider --proxy=off localhost:8080/healthz || exit 1
    image: searx/searx:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.searx.rule: Host(`searx.localhost`)
      traefik.http.services.searx.loadbalancer.server.port: '8080'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/searx/searx:/etc/searx:rw
  sharelatex:
    depends_on:
      sharelatex-mongo:
        condition: service_started
      sharelatex-redis:
        condition: service_started
    environment:
      SHARELATEX_ADMIN_EMAIL: changeme@changeme.org
      SHARELATEX_APP_NAME: '''s ShareLaTeX'
      SHARELATEX_HEADER_IMAGE_URL: http://somewhere.com/mylogo.png
      SHARELATEX_MONGO_URL: mongodb://sharelatex-mongo/sharelatex
      SHARELATEX_NAV_TITLE: localhost - ShareLaTeX
      SHARELATEX_REDIS_HOST: sharelatex-redis
      SHARELATEX_SITE_URL: https://latex.localhost
    image: sharelatex/sharelatex
    labels:
      traefik.enable: "true"
      traefik.http.routers.sharelatex.rule: Host(`sharelatex.localhost`)
      traefik.http.services.sharelatex.loadbalancer.server.port: '80'
    links:
    - sharelatex-mongo
    - sharelatex-redis
    networks:
      srv: {}
    privileged: true
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sharelatex/data:/var/lib/sharelatex:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  sharelatex-mongo:
    expose:
    - '27017'
    image: mongo
    labels:
      traefik.enable: "false"
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sharelatex/mongo:/data/db:rw
  sharelatex-redis:
    expose:
    - '6379'
    image: redis
    labels:
      traefik.enable: "false"
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sharelatex/redis/data:/data:rw
  sonarr:
    environment:
      PGID: '1000'
      PUID: '1000'
      TZ: Europe/Paris
    image: linuxserver/sonarr:2.0.0.5337-ls92
    labels:
      traefik.enable: "true"
      traefik.http.routers.sonarr.middlewares: basic_auth@docker
      traefik.http.routers.sonarr.rule: Host(`sonarr.localhost`)
      traefik.http.services.sonarr.loadbalancer.server.port: '8080'
    links:
    - jackett
    - transmission
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/sonarr/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/sonarr/downloads:/downloads:rw
    - /home/runner/work/make-my-server/make-my-server/sonarr/tv:/tv:rw
  streama:
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:8080/login/auth
      timeout: 10s
    image: gkiko/streama:v1.8.3
    labels:
      traefik.enable: "true"
      traefik.http.routers.streama.rule: Host(`streama.localhost`)
      traefik.http.services.streama.loadbalancer.server.port: '8080'
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/streama/streama.mv.db:/app/streama/streama.mv.db:rw
    - /home/runner/work/make-my-server/make-my-server/streama/streama.trace.db:/app/streama/streama.trace.db:rw
    - /home/runner/work/make-my-server/make-my-server/transmission/downloads:/data:rw
  theia:
    image: theiaide/theia
    init: true
    labels:
      traefik.enable: "true"
      traefik.http.routers.theia.middlewares: basic_auth@docker
      traefik.http.routers.theia.rule: Host(`theia.localhost`)
      traefik.http.services.theia.loadbalancer.server.port: '3000'
    networks:
      srv: {}
    restart: always
    user: 1000:1000
    volumes:
    - /home/runner:/home/project:cached
  tor-relay:
    build:
      context: https://github.com/jessfraz/dockerfiles.git#:tor-relay
    environment:
      CONTACT_EMAIL: changeme@changeme.org
      CONTACT_GPG_FINGERPRINT: ''
      CONTACT_NAME: ''
      RELAY_BANDWIDTH_BURST: 200 KBytes
      RELAY_BANDWIDTH_RATE: 100 KBytes
      RELAY_NICKNAME: hacktheplanet
      RELAY_PORT: '9001'
      RELAY_TYPE: middle
    image: jess/tor-relay
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    ports:
    - published: 9001
      target: 9001
    restart: always
    volumes:
    - /etc/localtime:/etc/localtime:rw
    - /home/runner/work/make-my-server/make-my-server/tor-relay/keys:/var/lib/tor/.tor/keys:rw
  traefik:
    command:
    - --providers.docker
    - --providers.docker.exposedbydefault=false
    - --providers.docker.network=make-my-server_srv
    - --entrypoints.web.address=:80
    - --entrypoints.web.http.redirections.entrypoint.to=websecure
    - --entrypoints.websecure.address=:443
    - --certificatesresolvers.myresolver.acme.email=changeme@changeme.org
    - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
    - --certificatesresolvers.myresolver.acme.httpchallenge=true
    - --entrypoints.websecure.http.tls.certresolver=myresolver
    - --accesslog.filepath=/logs/access.log
    - --accesslog.format=json
    - --log.filepath=/logs/traefik.log
    - --log.format=json
    - --log.level=ERROR
    - --metrics.prometheus
    - --api.dashboard
    - --entrypoints.websecure.http.middlewares=compress@file,headers@file
    - --experimental.plugins.fail2ban.modulename=github.com/tommoulard/fail2ban
    - --experimental.plugins.fail2ban.version=v0.6.0
    - --global.checknewversion=false
    - --global.sendanonymoususage=false
    - --pilot.token=
    - --ping
    - --providers.file.directory=/dynamic_conf/
    - --providers.file.watch=true
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - traefik
      - healthcheck
      - --ping
      timeout: 10s
    image: traefik:v2.7
    labels:
      traefik.enable: "true"
      traefik.http.middlewares.basic_auth.basicauth.removeHeader: "true"
      traefik.http.middlewares.basic_auth.basicauth.users: ''
      traefik.http.routers.traefik.middlewares: basic_auth@docker
      traefik.http.routers.traefik.rule: Host(`traefik.localhost`)
      traefik.http.routers.traefik.service: api@internal
    networks:
      srv: {}
    ports:
    - published: 80
      target: 80
    - published: 443
      target: 443
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/traefik/dynamic_conf:/dynamic_conf:rw
    - /home/runner/work/make-my-server/make-my-server/traefik/logs:/logs:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  transmission:
    environment:
      PGID: '1000'
      PUID: '1000'
      TRANSMISSION_WEB_HOME: /flood-for-transmission/
      TZ: Europe/Paris
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:9091/transmission/web/
      timeout: 10s
    image: linuxserver/transmission:3.00-r5-ls115
    labels:
      traefik.enable: "True"
      traefik.http.routers.transmission.middlewares: basic_auth@docker
      traefik.http.routers.transmission.rule: Host(`transmission.localhost`)
      traefik.http.services.transmission.loadbalancer.server.port: '9091'
    networks:
      srv: {}
    ports:
    - published: 51413
      target: 51413
    - protocol: udp
      published: 51413
      target: 51413
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/transmission/config:/config:rw
    - /home/runner/work/make-my-server/make-my-server/transmission/downloads:/downloads:rw
    - /home/runner/work/make-my-server/make-my-server/transmission/watch:/watch:rw
  vpn:
    environment:
      VPN_ADDL_PASSWORDS: ''
      VPN_ADDL_USERS: ''
      VPN_IPSEC_PSK: ''
      VPN_PASSWORD: ''
      VPN_USER: ''
    image: hwdsl2/ipsec-vpn-server:latest
    ports:
    - protocol: udp
      published: 500
      target: 500
    - protocol: udp
      published: 4500
      target: 4500
    privileged: true
    restart: always
    volumes:
    - /lib/modules:/lib/modules:ro
  watchtower:
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_ROLLING_RESTART: "true"
      WATCHTOWER_SCHEDULE: '''0 0 2 * * *'''
    image: containrrr/watchtower:latest
    labels:
      traefik.enable: "False"
    restart: always
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:rw
  wordpress:
    depends_on:
      wordpress-db:
        condition: service_started
    environment:
      WORDPRESS_DB_HOST: wordpress-db
      WORDPRESS_DB_NAME: wordpress-db
      WORDPRESS_DB_PASSWORD: ''
      WORDPRESS_DB_USER: wordpress-user
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - curl
      - 0.0.0.0:80
      timeout: 10s
    image: wordpress
    labels:
      traefik.enable: "true"
      traefik.http.routers.wordpress.rule: Host(`wordpress.localhost`)
      traefik.http.services.wordpress.loadbalancer.server.port: '80'
    links:
    - wordpress-db
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/wordpress/wordpress:/var/www/html:rw
  wordpress-db:
    environment:
      MYSQL_DATABASE: wordpress-db
      MYSQL_PASSWORD: ''
      MYSQL_RANDOM_ROOT_PASSWORD: ''
      MYSQL_USER: wordpress-user
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - mysqladmin
      - ping
      - -uwordpress-user
      - -p''
      - '|'
      - grep
      - alive
      timeout: 10s
    image: mysql:5.7
    labels:
      traefik.enable: "false"
    networks:
      srv: {}
    restart: always
    volumes:
    - /home/runner/work/make-my-server/make-my-server/wordpress/db:/var/lib/mysql:rw
version: '2'

